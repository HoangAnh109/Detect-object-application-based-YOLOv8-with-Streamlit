
import streamlit as st
from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image

# --- C√ÄI ƒê·∫∂T GIAO DI·ªÜN STREAMLIT ---
st.set_page_config(
    page_title="Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng v·ªõi YOLOv8",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("ü§ñ ·ª®ng d·ª•ng nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng v·ªõi YOLOv8")
st.write("T·∫£i l√™n m·ªôt ·∫£nh v√† m√¥ h√¨nh YOLOv8 s·∫Ω ph√°t hi·ªán c√°c ƒë·ªëi t∆∞·ª£ng trong ƒë√≥.")

# --- T·∫¢I M√î H√åNH YOLOv8 ---
@st.cache_resource
def load_model(model_path):
    """T·∫£i m√¥ h√¨nh YOLOv8."""
    model = YOLO(model_path)
    return model

# T·∫£i m√¥ h√¨nh yolov8n.pt
try:
    model = load_model('yolov8n.pt')
except Exception as e:
    st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
    st.stop()


# --- C√ÄI ƒê·∫∂T THANH B√äN (SIDEBAR) ---
st.sidebar.header("C·∫•u h√¨nh")
confidence = st.sidebar.slider(
    'Ng∆∞·ª°ng tin c·∫≠y (Confidence Threshold)', 
    min_value=0.0, 
    max_value=1.0, 
    value=0.25, 
    step=0.05
)

source_img = st.sidebar.file_uploader(
    "Ch·ªçn m·ªôt ·∫£nh...",
    type=("jpg", "jpeg", "png")
)

# --- X·ª¨ L√ù V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---
if source_img:
    # Chia 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh k·∫øt qu·∫£
    col1, col2 = st.columns(2)

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc ·ªü c·ªôt 1
    with col1:
        try:
            opened_image = Image.open(source_img)
            st.image(source_img, caption="·∫¢nh g·ªëc", use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói khi m·ªü ·∫£nh: {e}")
            st.stop()
            
    # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n di·ªán
    if st.sidebar.button("Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            image_np = np.array(opened_image)
            image_cv2 = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)
            
            res = model.predict(image_cv2, conf=confidence)
            boxes = res[0].boxes
            res_plotted = res[0].plot()
            res_plotted_rgb = cv2.cvtColor(res_plotted, cv2.COLOR_BGR2RGB)

            # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£ ·ªü c·ªôt 2
            with col2:
                st.image(res_plotted_rgb, caption='·∫¢nh ƒë√£ nh·∫≠n di·ªán',use_container_width=True)
            
        
            try:
                with st.expander("üìù Chi ti·∫øt nh·∫≠n di·ªán"):
                    if len(boxes) > 0:
                        for box in boxes:
                            class_id = int(box.cls[0])
                            class_name = model.names[class_id]
                            conf_score = float(box.conf[0])
                            st.write(f"- Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng **{class_name}** v·ªõi ƒë·ªô tin c·∫≠y **{conf_score:.2f}**")
                    else:
                        st.write("Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng n√†o v·ªõi ng∆∞·ª°ng tin c·∫≠y ƒë√£ ch·ªçn.")
            except Exception as ex:
                st.write("Kh√¥ng th·ªÉ hi·ªÉn th·ªã chi ti·∫øt.")
                st.write(ex)
     

else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

st.markdown("---")
